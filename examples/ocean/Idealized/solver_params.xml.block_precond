<ParameterList name="Trilinos THCM"><!--{-->
    
  <!-- Nonlinear solver parameters { -->
  <ParameterList name="NOX">

    <!-- "Line Search Based" or "Trust Region Based" (not tested) -->
    <Parameter name="Nonlinear Solver" type="string" value="Line Search Based"/>
    <!-- convergence tolerance for the Newton process -->
    <Parameter name="Convergence Tolerance" type="double" value="1.0e-6"/>

    <!-- Line Search parameters { -->
    <ParameterList name="Line Search">
      <!-- "Full Step" is standard Newton's, "Backtrack" is a line search, -->
      <!-- others exist as well -->
      <Parameter name="Method" type="string" value="Backtrack"/>
      
      <!-- maximum number of Newton iterations -->
      <Parameter name="Max Iters" type="int" value="10"/>
      
      <ParameterList name="Backtrack">
        <Parameter name="Default Step" type="double" value="1.0"/>
        <Parameter name="Max Iters" type="int" value="10"/>
        <Parameter name="Minimum Step" type="double" value="1e-6"/>
        <Parameter name="Recovery Step" type="double" value="1e-3"/>
      </ParameterList>
    </ParameterList><!-- } Line Search -->
    
    <!-- Parameters for the actual Newton solver { -->
    <ParameterList name="Direction">
      <Parameter name="Method" type="string" value="Newton"/>
      
      <ParameterList name="Newton"><!--{-->
        
        <!-- Method to determine convergence tolerance for linear solver -->
        <!-- "Constant", "Type 1" (fails!) or "Type 2" -->
        <Parameter name="Forcing Term Method" type="string" value="Type 2"/>
        <Parameter name="Forcing Term Initial Tolerance" type="double" value="1.0e-4"/>
        <Parameter name="Forcing Term Maximum Tolerance" type="double" value="1.0e-3"/>
        <Parameter name="Forcing Term Minimum Tolerance" type="double" value="1.0e-6"/>
        
        <!-- Use Newton step even if linear solve failed (default 1)-->
        <!-- If you say "0" here the continuation run _stops_ when  -->
        <!-- the linear solver fails to achieve the requested tol   -->
        <Parameter name="Rescue Bad Newton Solve" type="bool" value="1"/>
        
        <!-- Note: the docu for this list is in class NOX::Epetra::LinearSystemAztecOO -->
        <ParameterList name="Linear Solver"><!--{-->

          <!-- "GMRES", maybe others will be added        -->
          <Parameter name="Belos Solver" type="string" value="GMRES"/>

          <ParameterList name="Belos"><!--{-->
            <Parameter name="Flexible Gmres" type="bool" value="1"/>
            <Parameter name="Block Size" type="int" value="1"/>
            <Parameter name="Num Blocks" type="int" value="250"/>
            <Parameter name="Maximum Iterations" type="int" value="250"/>
            <Parameter name="Maximum Restarts" type="int" value="0"/>
            <Parameter name="Orthogonalization" type="string" value="DGKS"/>
            <Parameter name="Output Frequency" type="int" value="1"/>
          </ParameterList><!-- } Belos -->
          
          <!-- choose a preconditioner for the linear solves during Newton steps        -->
          <!-- "User Defined": Block GS/ILU or (see 'Block Preconditioner' sublist)     -->
          <!-- "New Ifpack": incomplete factorizations, parameters are set below        -->
          <!-- "ML": algebraic multigrid, parameters are set below                      -->
          <Parameter name="Preconditioner" type="string" value="User Defined"/>
          
          <!-- can be "Reuse", "Rebuild" or "Recompute"        -->
          
          <!-- "Rebuild" and "Recompute" are the same for most methods.           -->
          <!-- "Reuse" keeps the preconditioner for k linear system solves.       -->
          <!-- If you want to reuse the preconditioner at all, set this to "Reuse"-->
          <Parameter name="Preconditioner Reuse Policy" type="string" value="Rebuild"/>
          
          <!-- recompute preconditioner after K linear system solves. -->
          
          <!-- We have our own reuse-policy, controlled by the option -->
          <!-- with the same name in thcm_params.xml. If you want to  -->
          <!-- reuse the preconditioner, it's best to set this to -2  -->
          <!-- and use that option to control the maximum age.        -->
          <Parameter name="Max Age Of Prec" type="int" value="1"/>

          <!-- choose the "Block Preconditioner" or "FROSch" preconditioner  -->
          <!-- for the Jacobian if you slected "User Defined" for the option -->
          <!-- "Preconditioner" above.                                       -->
          <Parameter name="User Defined Preconditioner" type="string" value="Block Preconditioner"/>
          
          <!-- Here are parameters for the Block-ILU Preconditioner           -->
          <!-- (to use this precond choose "Preconditioner"="User Defined") -->
          <ParameterList name="Block Preconditioner"><!--{-->
              
            <!-- Preconditioner scheme: currently allowed are                    -->
            <!-- "ILU": involves the very expensive Schur-complement that        -->
            <!--        can not currently be solved efficiently                  -->
            <!-- "Gauss-Seidel": cheap but deteriorates quickly as forcing       -->
            <!--                  increases                                      -->
            <!-- "symmetric Gauss-Seidel": doesn't seem to give any improvement) -->
            <!--                           but is not much more expensive either -->
            <Parameter name="Scheme" type="string" value="Gauss-Seidel"/>
            
            <!-- use 0 starting guess for internal krylov solvers (like in THCM) -->
            <Parameter name="Zero Initial Guess" type="bool" value="1"/>
                
            <!-- relaxation parameter for block-Gauss-Seidel preconditioner -->
            <!-- currently it seems that 1.0 is a good choice               -->
            <Parameter name="Relaxation: Damping Factor" type="double" value="1.0"/>
              
            <!-- Parameters for the Krylov solver for the 'Auv' diagonal block       -->
            <!-- This solver is used inside the 'Simple' preconditioner              -->
            <ParameterList name="Auv Solver"><!--{-->
              <!-- up to now only "AztecOO" or "None" (just apply precond once) -->
              <Parameter name="Method" type="string" value="None"/>
              <!-- maximum number of iterations permitted -->
              <Parameter name="Max Num Iter" type="int" value="1"/>
              <!-- (relative) convergence tolerance      -->
              <Parameter name="Tolerance" type="double" value="1.0e-3"/>
              <!-- options include "GMRES", "GMRESR", etc. -->
              <Parameter name="Solver" type="string" value="GMRESR"/>
              <!-- type of scaling for conv. criterion ("r0","no scaling", "rhs",...) -->
              <Parameter name="Conv" type="string" value="r0"/>
              <!-- print every k'th iteration (0 to keep silent) -->
              <Parameter name="Output" type="int" value="1"/>
              <!-- unless you reaaly want to use an Aztec preconditioner, choose "None"! -->
              <Parameter name="Precond" type="string" value="None"/>
              <!-- max size of Krylov space before restart -->
              <Parameter name="KSpace" type="int" value="10"/>
              <!-- type of orthogonalization (fairly irrelevant) -->
              <Parameter name="Orthog" type="string" value="Classic"/>
            </ParameterList><!-- } Auv Solver -->
              
            <!-- Parameters for the preconditioner for Auv                 -->
            <!-- This preconditioner is used inside Simple                 -->
            <ParameterList name="Auv Precond"><!--{-->
                
              <!-- supported values are "None", "Ifpack", "ML", "ParaSails" -->
              <Parameter name="Method" type="string" value="ML"/>

              <!-- ML parameters {-->

              <!-- perform cheap test of Multigrid cycle -->
              <Parameter name="ML: Analyze Cycle" type="bool" value="0"/>

              <!-- MultiLevel parameters (choice "ML" above) -->
              <ParameterList name="ML">
               <!-- note: ML has changed a lot in 8.0, that's why some params are not -->
               <!-- documented yet                                                    -->
               <Parameter name="ML debug mode" type="bool" value="0"/>
               <Parameter name="ML output" type="int" value="0"/>
               <Parameter name="ML print final list" type="int" value="1"/>
               <Parameter name="ML validate parameter list" type="bool" value="1"/>

                <!-- number of unknowns per node -->
                <Parameter name="PDE equations" type="int" value="2"/>
                <Parameter name="default values" type="string" value="DD-ML-LU"/>
                <Parameter name="coarse: type" type="string" value="Amesos-KLU"/>
                <!-- maximum verbosity is 10, output is always sent to stdout  -->
                <Parameter name="output" type="int" value="1"/>
                <!-- "MGV","MGW","full-MGV" -->
                <Parameter name="prec type" type="string" value="MGV"/>
                <Parameter name="print unused" type="int" value="-2"/>                  
              </ParameterList><!--}-->
            </ParameterList><!--} Auv Precond -->
                  
            <!-- Solver parameters for the saddlepoint problem -->
            <ParameterList name="Saddlepoint Solver"><!--{-->
              <Parameter name="Method" type="string" value="AztecOO"/>
              <Parameter name="Max Num Iter" type="int" value="5"/>
              <Parameter name="Tolerance" type="double" value="1.0e-3"/>
              <Parameter name="Solver" type="string" value="GMRESR"/>
              <Parameter name="Conv" type="string" value="r0"/>
              <Parameter name="Output" type="int" value="1"/>
              <Parameter name="Scaling" type="string" value="None"/>
              <!-- don't touch this one, it's irrelevant -->
              <Parameter name="Precond" type="string" value="None"/>
              <Parameter name="KSpace" type="int" value="10"/>
              <Parameter name="Orthog" type="string" value="Classic"/>
            </ParameterList><!-- } Saddlepoint Solver -->


            <!-- Parameters for the modified Simple-type preconditioner for the -->
            <!-- Saddlepoint problem.                                           -->
            <ParameterList name="Saddlepoint Preconditioner"><!--{-->
            
              <!-- mode of operation for the Simple preconditioner.                    -->
              <!-- "SI": Simple "SL": SimpleL (transposed) "SR": symmetrized = SimpleR -->
              <Parameter name="Scheme" type="string" value="SR"/>

              <!-- enable repartitioning for Chat (requires Zoltan/Isorropia) -->
              <Parameter name="Repartition Chat" type="bool" value="0"/>

              <!-- define the method for approximating the inverse of Auv. {-->
              <ParameterList name="Approximate Inverse">
                
                <!-- can only be "Block Diagonal" (2x2 block-diagonal) or -->
                <!-- "ParaSails" (if it is installed)                     -->
                <Parameter name="Method" type="string" value="Block Diagonal"/>                                                      
              </ParameterList><!-- } Simple: Sparse Approximate Inverse -->

              <!-- Solver for Schur-complement inside Simple: { -->
              <ParameterList name="Chat Solver">
                <!-- can be "AztecOO" or "None" -->
                <Parameter name="Method" type="string" value="None"/>
                <Parameter name="Max Num Iter" type="int" value="1"/>
                <Parameter name="Tol" type="double" value="1.0e-2"/>
                <Parameter name="Solver" type="string" value="GMRESR"/>
                <Parameter name="Conv" type="string" value="r0"/>
                <Parameter name="Scaling" type="string" value="None"/>
                <Parameter name="Overlap" type="int" value="1"/>
                <Parameter name="Precond" type="string" value="None"/>
                <Parameter name="Subdomain_Solve" type="string" value="ilut"/>
                <Parameter name="Graph_Fill" type="double" value="1.0"/>
                <Parameter name="ILUT_Fill" type="double" value="1.0"/>
                <Parameter name="Drop" type="double" value="1.0e-8"/>
                <Parameter name="KSpace" type="int" value="10"/>
                <Parameter name="Orthog" type="string" value="Classic"/>
                <Parameter name="Output" type="int" value="1"/>
              </ParameterList><!-- } Grad-Div Solver -->

              <!-- Parameters for the preconditioner for \hat{C}                      -->
              <!-- (Schur-complement in Spp Simple precond)                           -->
              <!-- for comments see the "Auv Precond" list above {                    -->
              <ParameterList name="Chat Precond">
                                
                <Parameter name="Method" type="string" value="Ifpack"/>

                <!-- Ifpack -->
                  
                <Parameter name="Ifpack Method" type="string" value="Amesos stand-alone"/>
                <Parameter name="amesos: solver type" type="string" value="KLU"/>
              </ParameterList><!-- } Simple: Chat Precond -->
            </ParameterList><!-- } Saddlepoint Preconditioner -->

            <!-- solve for variables rho/mu instead of T/S -->
            <Parameter name="ATS: rho/mu Transform" type="bool" value="1"/>

            <!-- Parameters for the Krylov solver for ATS  -->
            <ParameterList name="ATS Solver"><!--{-->
              <Parameter name="Method" type="string" value="None"/>
            </ParameterList><!-- } ATS Solver -->
            
            <!-- Parameters for the preconditioner for ATS (also used for rho-mu system) -->
            <ParameterList name="ATS Precond"><!--{-->
                
              <!-- for comments see "Auv Precond" list above -->
                                  
              <Parameter name="Method" type="string" value="ML"/>
              <!-- supported values are "None", "Ifpack", "ML", "ParaSails" -->
              <Parameter name="Method" type="string" value="ML"/>

              <!-- ML parameters {-->

              <!-- perform cheap test of Multigrid cycle -->
              <Parameter name="ML: Analyze Cycle" type="bool" value="0"/>

              <!-- MultiLevel parameters (choice "ML" above) -->
              <ParameterList name="ML">
               <!-- note: ML has changed a lot in 8.0, that's why some params are not -->
               <!-- documented yet                                                    -->
               <Parameter name="ML debug mode" type="bool" value="0"/>
               <Parameter name="ML output" type="int" value="0"/>
               <Parameter name="ML print final list" type="int" value="1"/>
               <Parameter name="ML validate parameter list" type="bool" value="1"/>

                <!-- number of unknowns per node -->
                <Parameter name="PDE equations" type="int" value="2"/>
                <Parameter name="default values" type="string" value="DD-ML-LU"/>
                <Parameter name="coarse: type" type="string" value="Amesos-KLU"/>
                <!-- maximum verbosity is 10, output is always sent to stdout  -->
                <Parameter name="output" type="int" value="1"/>
                <!-- "MGV","MGW","full-MGV" -->
                <Parameter name="prec type" type="string" value="MGV"/>
                <Parameter name="print unused" type="int" value="-2"/>                  
              </ParameterList><!--}-->
            </ParameterList><!-- } ATS Precond -->
          </ParameterList><!-- } Block Preconditioner -->
              
        </ParameterList><!-- } Linear Solver -->
      </ParameterList><!-- } Newton -->
    </ParameterList><!-- } direction -->    
  </ParameterList><!-- } NOX -->
</ParameterList> <!-- } Trilinos -->
